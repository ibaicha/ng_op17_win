import { IExploitationChargeExploitation } from './../../../../interfaces/exploitation.interface';
import { ExploitationStoreModule } from './../../../../store/exploitation/exploitation-store.module';
import { Component, Input, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LoginService } from '../../../../services/login.service';
import { Store, select } from '@ngrx/store';
import * as fromExploitationsCustom from '../../../../store/exploitation/exploitationCustom' ;
import * as fromRemboursements from '../../../../store/remboursement';
import * as fromChargeExploitations from '../../../../store/charge_exploitation';
import * as fromMouvementStockages from '../../../../store/mouvement_stockage';
import { Observable, Subscription } from 'rxjs';
import { IChargeExploitation, IExploitationCustom, ITypeChargeExploitation } from '../../../../interfaces/exploitation.interface';
import { MenuItem } from 'primeng/api';
import { ToastModule } from 'primeng/toast';
import { StepsModule } from 'primeng/steps';
import { ButtonModule } from 'primeng/button';
import { ToolbarModule } from 'primeng/toolbar';
import { IMouvementCustom, IMouvementStockage, IRecolteCustom, IRemboursement, IRemboursementCustom } from '../../../../interfaces/credit.interface';
import { TableModule } from 'primeng/table';
import { AccordionModule } from 'primeng/accordion';
import { SidebarModule } from 'primeng/sidebar';
import { PanelModule } from 'primeng/panel'; // import the PanelModule
import { IVariete } from '../../../../interfaces/filiere.interface';
import { AppService } from '../../../../services/app.service';

export enum PageNames {
  DebutPage,
  DeuxPage,
  TroisPage,
  FinPage,
}
@Component({
  selector: 'app-dialog-exploitation',
  standalone: true,
  imports: [
    ToastModule,
    StepsModule,
    ButtonModule,
    ToolbarModule,
    TableModule,
    AccordionModule,
    SidebarModule,
    PanelModule,
  ],
  templateUrl: './dialog-exploitation.component.html',
  styleUrl: './dialog-exploitation.component.css'
})
export class DialogExploitationComponent implements OnDestroy {



  colsRemboursements: any[] = [];
  colsMouvements: any[] = [];
  colsRecoltes: any[] = [];
  PageNames = PageNames;
  dialogPageIndex = PageNames.DebutPage;

  dialogPages: MenuItem[] = [
    { label: "Résumé" },
    { label: "Récoltes" },
    { label: 'Remboursements' },
    { label: "Détails exploitation" }

  ];

  exploitationsCustom$!: Observable<IExploitationCustom  | undefined>;
  private exploitationsCustomSubscription: Subscription | undefined;
  exploitationsCustom: IExploitationCustom | undefined;
  exploitationCustom: IExploitationCustom  | undefined;
  selectedexploitationCustom: IExploitationCustom  | undefined;
  exploitationExigible: number  = 0;
  exploitationQuantiteRecolte: number  = 0;
  exploitationValeurRecolte: number  = 0;
  exploitationTauxRecolte: number  = 0;

  mesRemboursements$!: Observable<IRemboursement[]>;
  private mesRemboursementsSubscription: Subscription | undefined;
  mesRemboursements: IRemboursement[] = [];
  monRemboursement: any = {};
  selectedmesRemboursements: IRemboursement[] | undefined;

  chargeExploitations$!: Observable<IChargeExploitation[]>;
  private chargeExploitationsSubscription: Subscription | undefined;
  chargeExploitations: IChargeExploitation[] = [];
  chargeExploitation: any = {};
  selectedchargeExploitations: IChargeExploitation[] | undefined;

  typeChargeExploitations: ITypeChargeExploitation[] = [];

  remboursementsCustom: IRemboursementCustom[] = [];
  recoltesCustom: IRecolteCustom[] = [];
  chargeExploitationsCustom: IExploitationChargeExploitation[] = [];


  mouvementStockagesOpProduitCampagne$!: Observable<IMouvementStockage[]>;
  private mouvementStockagesOpProduitCampagneSubscription: Subscription | undefined;
  mouvementStockagesOpProduitCampagne: IMouvementStockage[] = [];
  mouvementStockageOpProduitCampagne: any = {};
  selectedmouvementStockagesOpProduitCampagne: IMouvementStockage[] | undefined;

  mouvementStockagesCustom: IMouvementCustom[] = [];

  varietes: IVariete[] = [];


  chargesExploitationGroupsType: {
    //[typeChargeExploitationId: number]: IChargeExploitation[] & { somme?: number };
    [typeChargeExploitationId: number]: IChargeExploitation[] ;
  } = {};

  messageRemboursements: string = 'PAS DE REMBOURSEMENT EFFECTUE';
  messageRecoltes: string = 'PAS DE RECOLTE EFFECTUE';
  messageMouvements: string = 'PAS DE MOUVEMENT EFFECTUE';

  dialogTitle: string = '';
  dialogText: string = '';

  constructor(
    private readonly store: Store,
    public loginService: LoginService,
    public appService: AppService
  ) {
    this.varietes = this.loginService.allVarietes.map((device: any) => {
      return { ...device };
    });


    this.exploitationsCustom$ = this.store.pipe(
      select(
        fromExploitationsCustom.selectExploitationCustomById(
          this.loginService.exploitationId
        )
      )
    );

    this.chargeExploitations$ = this.store.pipe(
      select(
        fromChargeExploitations.selectChargeExploitationsList
      )
    );

    this.mouvementStockagesOpProduitCampagne$ = this.store.pipe(
      select(fromMouvementStockages.selectMouvementStockagesOpProduitCampagneList)
    );
   }

   ngOnInit() {



    this.colsRemboursements = [
      { field: 'id', header: 'ID', sort: false, filter: false },
      { field: 'date', header: 'DATE', sort: true, filter: true },
      { field: 'emballageName', header: 'EMBALLAGE', sort: true, filter: true },
      { field: 'quantite', header: 'QUANTITE', sort: true, filter: true },
      { field: 'pu', header: 'PU', sort: true, filter: true },
      { field: 'valeur', header: 'VALEUR', sort: true, filter: true },
      { field: 'pointCollecteName', header: 'POINT', sort: true, filter: true },
      { field: 'localiteName', header: 'LOCALITE', sort: true, filter: true },
    ];

    this.colsMouvements = [
      { field: 'id', header: 'ID', sort: false, filter: false },
      { field: 'date', header: 'DATE', sort: true, filter: true },
      { field: 'emplacementName', header: 'EMPLACEMENT', sort: true, filter: true },
      { field: 'emballageName', header: 'EMBALLAGE', sort: true, filter: true },
      { field: 'quantite', header: 'QUANTITE', sort: true, filter: true },
      { field: 'pu', header: 'PU', sort: true, filter: true },
      { field: 'valeur', header: 'VALEUR', sort: true, filter: true },
      //{ field: 'pointCollecteName', header: 'POINT', sort: true, filter: true },
      //{ field: 'localiteName', header: 'LOCALITE', sort: true, filter: true },
    ];

    this.colsRecoltes = [
      { field: 'id', header: 'ID', sort: false, filter: false },
      { field: 'date', header: 'DATE', sort: true, filter: true },
      { field: 'emballageName', header: 'EMBALLAGE', sort: true, filter: true },
      { field: 'quantite', header: 'QUANTITE', sort: true, filter: true },
      { field: 'pu', header: 'PU', sort: true, filter: true },
      { field: 'valeur', header: 'VALEUR', sort: true, filter: true },
    ];



    // console.log('this.loginService.exploitationId: ', this.loginService.exploitationId);
    this.initDispatch();
    this.initSubscriptions();

  }

  ngOnDestroy(): void {

    this.exploitationsCustomSubscription?.unsubscribe();

  }


  private initDispatch(): void {
    this.store.dispatch(fromExploitationsCustom.getExploitationCustoms());
    this.store.dispatch(fromChargeExploitations.getChargeExploitations());

    const retourVariete  = this.varietes.find((item) => item.id == parseInt(this.appService.getLocalselectedVarieteId()));
    console.log('retourVariete: ', retourVariete);
    this.store.dispatch(fromMouvementStockages.getAllMouvementStockagesOpProduitCampagne({opId:this.appService.getLocalselectedOpId(), produitId: retourVariete!.produit.id, anneeId: this.appService.getLocalselectedCampagneAnneeId(), saisonId: this.appService.getLocalselectedCampagneSaisonId()}));
  }
  private initSubscriptions(): void {

    this.chargeExploitationsSubscription = this.chargeExploitations$.subscribe(
      (datas: any[]) => {
        if (datas) {
          this.chargeExploitations = datas.map((device: any) => {
            return { ...device };
          });
          const typesDeChargesNonDistinct: { id: number, name: string }[] = datas.map(charge => ({
            id: charge.typeChargeExploitation.id,
            name: charge.typeChargeExploitation.name,
          }));

          this.typeChargeExploitations = typesDeChargesNonDistinct.filter((obj, index) => {
            return index === typesDeChargesNonDistinct.findIndex(o => obj.id === o.id && obj.name === o.name);
          });


          this.typeChargeExploitations.forEach((typeCharge: any) => {
            this.chargesExploitationGroupsType[typeCharge.id] = this.chargeExploitations.filter((charge: any) => charge.typeChargeExploitation.id == typeCharge.id);
           // this.chargesExploitationGroupsType[typeCharge.id].somme = 0;
          });

          this.typeChargeExploitations.forEach((item) => {

            this.retourneChargesExploitation(item.id);

          });

          datas.forEach((item) => {

          });
        }
        // console.log('this.chargeExploitations: ', this.chargeExploitations);
      }
    );

    this.exploitationsCustomSubscription = this.exploitationsCustom$.subscribe(
      (datas: IExploitationCustom | undefined) => {
        if (datas) {
          this.exploitationCustom = datas;
          console.log('this.exploitationCustom: ', this.exploitationCustom);
          this.exploitationExigible  = this.exploitationCustom.credits[0].capital + this.exploitationCustom.credits[0].interet + this.exploitationCustom.credits[0].moratoire + this.exploitationCustom.credits[0].autres_engagements
          if(this.exploitationCustom.remboursements.length == 0) {
            this.messageRemboursements = 'PAS DE REMBOURSEMENTS EFFECTUES';
          } else {
            this.messageRemboursements = 'LISTE DES RÉMBOURSEMENTS';

            this.remboursementsCustom = [];
            this.exploitationCustom.remboursements.forEach((remboursement: any) => {
              // console.log('remboursement: ', remboursement);
              // console.log('remboursement.emballage: ', remboursement.emballage);
              this.remboursementsCustom.push({
                id: remboursement.id,
                date: remboursement.date,
                pu: remboursement.pu,
                quantite: remboursement.quantite,
                valeur: remboursement.valeur,
                emballageId: remboursement.emballage.id,
                emballageName: remboursement.emballage.name,
                typeEmballageId: remboursement.emballage.typeEmballage.id,
                typeEmballageName: remboursement.emballage.typeEmballage.name,
                pointId: remboursement.pointCollecte.id,
                pointName: remboursement.pointCollecte.name,
                localiteId: remboursement.pointCollecte.localite.id,
                localiteName: remboursement.pointCollecte.localite.name
              })
            });
            // console.log('this.remboursementsCustom: ', this.remboursementsCustom);
          }
          if(this.exploitationCustom.recoltes.length == 0) {
            this.messageRecoltes = 'PAS DE RECOLTES EFFECTUES';

          } else {
            this.messageRecoltes = 'LISTE DES RECOLTES';

            this.recoltesCustom = [];

            this.exploitationCustom.recoltes.forEach((recolte: any) => {
              // console.log('recolte: ', recolte);
              // console.log('recolte.emballage: ', recolte.emballage);

              this.recoltesCustom.push({
                id: recolte.id,
                date: recolte.date,
                pu: recolte.pu,
                quantite: recolte.quantite,
                valeur: recolte.valeur,
                emballageId: recolte.emballage.id,
                emballageName: recolte.emballage.name,
                typeEmballageId: recolte.emballage.typeEmballage.id,
                typeEmballageName: recolte.emballage.typeEmballage.name,
              });

              if(recolte.emballage.uniteGrandeur.valeur_reference == 1) {
                this.exploitationQuantiteRecolte = this.exploitationQuantiteRecolte + recolte.quantite*recolte.emballage.quantite/1000;
              }
              if(recolte.emballage.uniteGrandeur.valeur_reference == 1000) {
                this.exploitationQuantiteRecolte = this.exploitationQuantiteRecolte + recolte.quantite*recolte.emballage.quantite;
              }

              this.exploitationTauxRecolte = this.exploitationQuantiteRecolte/this.exploitationCustom!.surface


              this.exploitationValeurRecolte = this.exploitationValeurRecolte + recolte.valeur;
            });
          }
          if(this.exploitationCustom.exploitationChargeExploitations.length == 0){

          } else {

            this.chargeExploitationsCustom = [];
            this.exploitationCustom.exploitationChargeExploitations.forEach((ece: any) => {
              // console.log('exploitationChargeExploitations: ', ece);
              this.chargeExploitationsCustom.push({
                id: ece.id,
                date: ece.date,
                pu: ece.pu,
                quantite: ece.quantite,
                valeur: ece.valeur,
                unite: ece.unite,
                observation: ece.observation,
                exploitationId: ece.exploitationId,
                chargeExploitationId: ece.chargeExploitationId,
              });
            });

          }
        }
      }
    );


    this.mouvementStockagesOpProduitCampagneSubscription = this.mouvementStockagesOpProduitCampagne$.subscribe((datas: any[]) => {
      if(datas){
        this.mouvementStockagesOpProduitCampagne = datas.map((device: any) => {return {...device};});
        console.log('this.mouvementStockagesOpProduitCampagne: ', datas);

        if(this.mouvementStockagesOpProduitCampagne.length == 0) {
          this.messageMouvements = 'PAS DE MOUVEMENT EFFECTUE';
        } else {
          this.messageMouvements = 'LISTE DES MOUVEMENTS';
          this.mouvementStockagesCustom = [];
          this.mouvementStockagesOpProduitCampagne.forEach((mouvement: any) => {
            this.mouvementStockagesCustom.push({
              id: mouvement.id,
              date: mouvement.date,
              pu: mouvement.pu,
              quantite: mouvement.quantiteEntreeEmballage,
              valeur: mouvement.valeur,
              emballageId: mouvement.emballage.id,
              emballageName: mouvement.emballage.name,
              emplacementId: mouvement.emplacement.id,
              emplacementName: mouvement.emplacement.name,
            });
          });
      }
    }
    });

  }



  allerSuivant() {
    this.dialogPageIndex = this.dialogPageIndex + 1;
  }
  allerAvant() {
    this.dialogPageIndex = this.dialogPageIndex - 1;
  }

  remboursementsFromExploitation() {
    this.mesRemboursements$ = this.store.select(
      fromRemboursements.selectRemboursementsListFromExploitation(
        this.loginService.exploitationId
      )
    );
    this.mesRemboursementsSubscription = this.mesRemboursements$.subscribe(
      (datas: any[]) => {
        // this.messageRemboursements = 'PAS DE REMBOURSEMENTS EFFECTUES';

        if (datas) {
          this.mesRemboursements = datas.map((device: any) => {
            return { ...device };

          });
          /*
          if(datas.length > 0) {
            this.messageRemboursements = 'LISTE DES RÉMBOURSEMENTS';
          }
          console.log('this.mesRemboursements: ', this.mesRemboursements);
          */
        }
      }
    );
  }

  getTotalMontants(myTab: any): number {
    // console.log('myTabRemboursements: ', myTabRemboursements);
    return myTab.value?.map((item: { valeur: any; }) => item.valeur)?.reduce((a: any, b: any) => a + b, 0) || 0;
  }

  formatMontant(montant: number) {
    return montant.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
  }

  formatDate(date: Date) {
    const dateObject = new Date(date);
    const formattedDate = dateObject.toLocaleDateString('fr-FR');
    return formattedDate;

  }

  retourTypeChargesx(datas: ITypeChargeExploitation []) {
    var filterArray = datas.reduce((accumulator: ITypeChargeExploitation[], current) => {
      if (
        !accumulator.some(
          (item) => item.id === current.id && item.name === current.name,
        )
      ) {
        accumulator.push(current);
      }
      return accumulator;
    }, []);
    // console.log('filterArray: ', filterArray);

  }

  retourTypeCharges(datas: ITypeChargeExploitation []) {
    const uniqueIds: any[] = [];

const unique = datas.filter(element => {
  const isDuplicate = uniqueIds.includes(element.id);

  if (!isDuplicate) {
    uniqueIds.push(element.id);

    return true;
  }

  return false;
});
  }

  retourneChargesExploitation(typeChargeExploitationId: number){
    const mesCharges = this.chargesExploitationGroupsType[typeChargeExploitationId];
    // console.log('mescharges: ' + mesCharges);
    return mesCharges.filter((charge: IChargeExploitation) => charge.isProduit == true);
  }

  retourneExploitationChargesExploitation(chargeExploitationId: number){
    const mesExploitationCharges = this.chargeExploitationsCustom.filter((ce: any) => ce.chargeExploitationId == chargeExploitationId);
    // console.log('mesExploitationCharges: ' + mesExploitationCharges);
    return mesExploitationCharges;
  }
  totalECEbyExploitation(chargeExploitationId: number){

    const mesExploitationCharges = this.chargeExploitationsCustom.filter((ce: any) => ce.chargeExploitationId == chargeExploitationId);
    const sum = mesExploitationCharges.map((item: { valeur: any; }) => item.valeur)?.reduce((a: any, b: any) => a + b, 0) || 0;
    return sum;
  }

  totalECEbyTypeExploitation(typeChargeExploitationId: number){

    let total = 0;
    const mesCharges = this.chargesExploitationGroupsType[typeChargeExploitationId];
    mesCharges.forEach((charge: any) => {
      const mesExploitationCharges = this.chargeExploitationsCustom.filter((ce: any) => ce.chargeExploitationId == charge.id);
      const sum = mesExploitationCharges.map((item: { valeur: any; }) => item.valeur)?.reduce((a: any, b: any) => a + b, 0) || 0;
      total = total + sum;
    })

    return total;
  }

  totalECE(){

    const sum = this.chargeExploitationsCustom.map((item: { valeur: any; }) => item.valeur)?.reduce((a: any, b: any) => a + b, 0) || 0;
    return sum;
  }


}
