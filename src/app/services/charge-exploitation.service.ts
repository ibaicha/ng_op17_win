import { Injectable } from '@angular/core';
import { AppService } from './app.service';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { IChargeExploitation } from '../interfaces/exploitation.interface';

@Injectable({
  providedIn: 'root',
})
export class ChargeExploitationService {
  ChargeExploitationDialogTitre = '';
  newChargeExploitation: any = {};
  editedChargeExploitation: any = {};
  deletedChargeExploitation: any = {};
  ChargeExploitations = [];

  constructor(public http: HttpClient, private appService: AppService) {}
  token = this.appService.getLocalToken();

  getChargeExploitation(id: number): Observable<any> {
    return this.http.get(
      this.appService.getUrl('/ChargeExploitations/' + id),
      this.token
    );
  }

  getChargeExploitations(): Observable<any> {
    return this.http.get(
      this.appService.getUrl('/ChargeExploitations'),
      this.token
    );
  }

  getAllCustom(): Observable<any> {
    return this.http.get(
      this.appService.getUrl('/ChargeExploitations/custom/'),
      this.token
    );
  }
  create(ChargeExploitation: IChargeExploitation): Observable<any> {
    let body: any = {};
    console.log(ChargeExploitation);
    body.id = null;
    body.name = ChargeExploitation.name;
    body.unite = ChargeExploitation.unite;
    body.pu = ChargeExploitation.pu;
    body.quantite_unite_superficie =
      ChargeExploitation.quantite_unite_superficie;
    body.isAchat = ChargeExploitation.isAchat;
    body.isProduit = ChargeExploitation.isProduit;
    body.isIntrant = ChargeExploitation.isIntrant;
    body.typeChargeExploitationId =
      ChargeExploitation.typeChargeExploitation.id;
    body.familleChargeExploitationId =
      ChargeExploitation.familleChargeExploitation.id;
    return this.http.post(
      this.appService.getUrl('/ChargeExploitations/create'),
      body,
      this.token
    );
  }
  update(ChargeExploitation: IChargeExploitation): Observable<any> {
    let body: any = {};
    console.log(ChargeExploitation);
    body.id = null;
    body.name = ChargeExploitation.name;
    body.unite = ChargeExploitation.unite;
    body.pu = ChargeExploitation.pu;
    body.quantite_unite_superficie =
      ChargeExploitation.quantite_unite_superficie;
    body.isAchat = ChargeExploitation.isAchat;
    body.isProduit = ChargeExploitation.isProduit;
    body.isIntrant = ChargeExploitation.isIntrant;
    body.typeChargeExploitationId =
      ChargeExploitation.typeChargeExploitation.id;
    body.familleChargeExploitationId =
      ChargeExploitation.familleChargeExploitation.id;

    return this.http.put(
      this.appService.getUrl(
        '/ChargeExploitations/update/' + ChargeExploitation.id
      ),
      body,
      this.token
    );
  }

  delete(ChargeExploitation: IChargeExploitation): Observable<any> {
    return this.http.delete(
      this.appService.getUrl(
        '/ChargeExploitations/delete/' + ChargeExploitation.id
      ),
      this.token
    );
  }
}
