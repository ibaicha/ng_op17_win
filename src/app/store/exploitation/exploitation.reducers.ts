import { Action, createReducer, on } from '@ngrx/store';

import { IExploitationState } from './exploitation.model';
import * as fromExploitations from './index';
import { Actions } from '@ngrx/effects';

export const initialExploitationState: IExploitationState = {
    exploitations: [],
    isLoading: false
};

const reducer = createReducer<IExploitationState>(
    initialExploitationState,





    on(fromExploitations.getExploitation, (state) => {
        return {
            ...state,
            isLoading: true
        };
    }),
    on(fromExploitations.getExploitationSuccess, (state, { oneExploitation }) => {
        return {
            ...state,
            isLoading: false,
            oneExploitation
        };
    }),

    on(fromExploitations.getExploitations, (state) => {
        return {
            ...state,
            isLoading: true
        };
    }),
    on(fromExploitations.getExploitationsSuccess, (state, { exploitations }) => {
        return {
            ...state,
            isLoading: false,
            exploitations
        };
    }),
    on(fromExploitations.createExploitation, (state) => {
        return {
            ...state,
            isLoading: true,
        };
    }),
    on(fromExploitations.createExploitationSuccess, (state, { exploitation }) => {
        return {
            ...state,
            exploitations: [...state.exploitations, exploitation],
            isLoading: false,
        };
    }),
    on(fromExploitations.updateExploitation, (state) => {
        return {
            ...state,
            isLoading: true,
        };
    }),
    on(fromExploitations.updateExploitationSuccess, (state, { exploitation }) => {
        return {
            ...state,
            exploitations: state.exploitations.map((b) => b.id === exploitation.id ? exploitation : b),
            isLoading: false,
        };
    }),
    on(fromExploitations.deleteExploitation, (state) => {
        return {
            ...state,
            isLoading: true,
        };
    }),
    on(fromExploitations.deleteExploitationSuccess, (state, { exploitation }) => {
        return {
            ...state,
            isLoading: false,
            exploitations: state.exploitations.filter((b) => b.id !== exploitation.id)
        };
    })
);

export function exploitationReducer(state = initialExploitationState, actions: Action): IExploitationState {
    return reducer(state, actions);
}
