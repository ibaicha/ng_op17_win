import { Injectable } from '@angular/core';

import { Actions, createEffect, ofType } from '@ngrx/effects';

import { map, switchMap } from 'rxjs/operators';

import * as fromExploitations from './index';
import { ExploitationService } from '../../services/exploitation.service';
import { IExploitation, IExploitationCustom } from '../../interfaces/exploitation.interface';

@Injectable()
export class ExploitationEffects {
    constructor(private readonly actions$: Actions, private readonly exploitationService: ExploitationService) {
    }

    getExploitations$ = createEffect(() =>
        this.actions$.pipe(
            ofType(fromExploitations.getExploitations.type),
            switchMap(() => this.exploitationService.getExploitations()),
            map((exploitations: IExploitation[]) => fromExploitations.getExploitationsSuccess({exploitations}))
        )
    );

    createExploitation$ = createEffect(() =>
        this.actions$.pipe(
            ofType(fromExploitations.createExploitation),
            switchMap((action) => this.exploitationService.create(action.body)),
            map((res: any) => fromExploitations.createExploitationSuccess({exploitation: res}))
        )
    );

    updateExploitation$ = createEffect(() =>
        this.actions$.pipe(
            ofType(fromExploitations.updateExploitation),
            switchMap((action) => this.exploitationService.update(action.body)),
            map((res: any) => fromExploitations.updateExploitationSuccess({exploitation: res}))
        )
    );


 



    deleteExploitation$ = createEffect(() =>
        this.actions$.pipe(
            ofType(fromExploitations.deleteExploitation),
            switchMap((action) => this.exploitationService.delete(action.body)),
            map((res: any) => fromExploitations.deleteExploitationSuccess({exploitation: res}))
        )
    );
}
