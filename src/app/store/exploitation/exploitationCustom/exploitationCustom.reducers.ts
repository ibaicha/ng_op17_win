import { Action, createReducer, on } from '@ngrx/store';

import { IExploitationCustomState } from './exploitationCustom.model';
import * as fromExploitationCustoms from './index';
import { Actions } from '@ngrx/effects';

export const initialExploitationCustomState: IExploitationCustomState = {
    exploitationCustoms: [],
    isLoading: false
};

const reducer = createReducer<IExploitationCustomState>(
    initialExploitationCustomState,
    on(fromExploitationCustoms.getExploitationCustom, (state) => {
        return {
            ...state,
            isLoading: true
        };
    }),
    on(fromExploitationCustoms.getExploitationCustomSuccess, (state, { oneExploitationCustom }) => {
        return {
            ...state,
            isLoading: false,
            oneExploitationCustom
        };
    }),

    on(fromExploitationCustoms.getExploitationCustoms, (state) => {
        return {
            ...state,
            isLoading: true
        };
    }),
    on(fromExploitationCustoms.getExploitationCustomsSuccess, (state, { exploitationCustoms }) => {
        return {
            ...state,
            isLoading: false,
            exploitationCustoms
        };
    }),





);

export function exploitationCustomReducer(state = initialExploitationCustomState, actions: Action): IExploitationCustomState {
    return reducer(state, actions);
}
