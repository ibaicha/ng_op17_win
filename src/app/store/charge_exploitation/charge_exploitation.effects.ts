import { Injectable } from '@angular/core';

import { Actions, createEffect, ofType } from '@ngrx/effects';

import { map, switchMap } from 'rxjs/operators';

import * as fromChargeExploitations from './index';
import { ChargeExploitationService } from '../../services/charge-exploitation.service';
import { IChargeExploitation } from '../../interfaces/exploitation.interface';

@Injectable()
export class ChargeExploitationEffects {
    constructor(private readonly actions$: Actions, private readonly chargeExploitationService: ChargeExploitationService) {
    }

    getChargeExploitations$ = createEffect(() =>
        this.actions$.pipe(
            ofType(fromChargeExploitations.getChargeExploitations.type),
            switchMap(() => this.chargeExploitationService.getChargeExploitations()),
            map((chargeExploitations: IChargeExploitation[]) => fromChargeExploitations.getChargeExploitationsSuccess({chargeExploitations}))
        )
    );

    createChargeExploitation$ = createEffect(() =>
        this.actions$.pipe(
            ofType(fromChargeExploitations.createChargeExploitation),
            switchMap(({chargeExploitation}) => this.chargeExploitationService.create(chargeExploitation)),
            map((chargeExploitation: IChargeExploitation) => fromChargeExploitations.createChargeExploitationSuccess({chargeExploitation}))
        )
    );

    updateChargeExploitation$ = createEffect(() =>
        this.actions$.pipe(
            ofType(fromChargeExploitations.updateChargeExploitation),
            switchMap(({chargeExploitation}) => this.chargeExploitationService.update(chargeExploitation)),
            map((chargeExploitation: IChargeExploitation) => fromChargeExploitations.updateChargeExploitationSuccess({chargeExploitation}))
        )
    );

    deleteChargeExploitation$ = createEffect(() =>
        this.actions$.pipe(
            ofType(fromChargeExploitations.deleteChargeExploitation),
            switchMap(({chargeExploitation}) => this.chargeExploitationService.delete(chargeExploitation)),
            map((chargeExploitation: IChargeExploitation) => fromChargeExploitations.deleteChargeExploitationSuccess({chargeExploitation}))
        )
    );
}
