import { Action, createReducer, on } from '@ngrx/store';

import { IChargeExploitationState } from './charge_exploitation.model';
import * as fromChargeExploitations from './index';
import { Actions } from '@ngrx/effects';

export const initialChargeExploitationState: IChargeExploitationState = {
    chargeExploitations: [],
    isLoading: false
};

const reducer = createReducer<IChargeExploitationState>(
    initialChargeExploitationState,
    on(fromChargeExploitations.getChargeExploitation, (state) => {
        return {
            ...state,
            isLoading: true
        };
    }),
    on(fromChargeExploitations.getChargeExploitationSuccess, (state, { oneChargeExploitation }) => {
        return {
            ...state,
            isLoading: false,
            oneChargeExploitation
        };
    }),

    on(fromChargeExploitations.getChargeExploitations, (state) => {
        return {
            ...state,
            isLoading: true
        };
    }),
    on(fromChargeExploitations.getChargeExploitationsSuccess, (state, { chargeExploitations }) => {
        return {
            ...state,
            isLoading: false,
            chargeExploitations
        };
    }),
    on(fromChargeExploitations.createChargeExploitation, (state) => {
        return {
            ...state,
            isLoading: true,
        };
    }),
    on(fromChargeExploitations.createChargeExploitationSuccess, (state, { chargeExploitation }) => {
        return {
            ...state,
            chargeExploitations: [...state.chargeExploitations, chargeExploitation],
            isLoading: false,
        };
    }),
    on(fromChargeExploitations.updateChargeExploitation, (state) => {
        return {
            ...state,
            isLoading: true,
        };
    }),
    on(fromChargeExploitations.updateChargeExploitationSuccess, (state, { chargeExploitation }) => {
        return {
            ...state,
            chargeExploitations: state.chargeExploitations.map((b) => b.id === chargeExploitation.id ? chargeExploitation : b),
            isLoading: false,
        };
    }),
    on(fromChargeExploitations.deleteChargeExploitation, (state) => {
        return {
            ...state,
            isLoading: true,
        };
    }),
    on(fromChargeExploitations.deleteChargeExploitationSuccess, (state, { chargeExploitation }) => {
        return {
            ...state,
            isLoading: false,
            chargeExploitations: state.chargeExploitations.filter((b) => b.id !== chargeExploitation.id)
        };
    })
);

export function chargeExploitationReducer(state = initialChargeExploitationState, actions: Action): IChargeExploitationState {
    return reducer(state, actions);
}
